name: Dependencies
# Checks the entire repository for outdated packages (latest) and prints output to .txt

on:
  push:
    branches: [main]

# on:
#   schedule:
# minute (0-59) - hour (0-23) - date (1-31) - month (1-12 or JAN-DEC) - day (0-6 or SUN-SAT)
# - cron: ''
# - cron: '0 17 * * SUN' # Test

jobs:
  build:
    name: Outdated Dependencies
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      # - name: pnpm outdated dependencies
      #   run: pnpm outdated -r

      - uses: actions/github-script@v7
        with:
          script: |
            const options = {
              ignoreReturnCode: true,
            }
            const { exitCode, stdout, stderr } = await exec.getExecOutput(`pnpm outdated -r --format json`, [], options)

            core.setOutput('exitCode', exitCode)
            core.setOutput('stdout', stdout)
            core.setOutput('stderr', stderr)

            let report
            try {
              report = JSON.parse(stdout)
            } catch (err) {
              console.error(err)
            }
            const header = [
              { data: 'Package', header: true },
              { data: 'Current', header: true },
              { data: 'Latest', header: true },
              { data: 'Dependents', header: true },
            ]

            const rows = Object.entries(report).map(([name, data]) => {
              let deprecated
              if (data['isDeprecated']) deprecated = '$${\\color{red}Deprecated}$$'
              const dependentPackages = data['dependentPackages']
                .map(({ name }) => name)
                .join('<br>')
                .trim()
              return [name, data['current'], deprecated ?? data['latest'], dependentPackages]
            })
            core.summary
              .addHeading('Packages')
              .addTable([header, ...rows])
              .write()
