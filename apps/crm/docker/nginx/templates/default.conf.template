# Upstream referencing service container_name in docker-compose file
upstream react-app-prod {
  server ${REACT_CONTAINER}:${REACT_DOCKER_PORT};
}

upstream node-api-prod {
  server ${EXPRESS_CONTAINER}:${EXPRESS_DOCKER_PORT};
}

server {
  listen ${NGINX_PROXY_0_DOCKER_PORT_HTTP};

  location = /health {
    return 200 "ok\n";
  }
}

server {
  listen ${NGINX_PROXY_0_DOCKER_PORT_TLS} ssl;

  # Public facing certification
  ssl_certificate /etc/nginx/certs/nginx.crt;
  ssl_certificate_key /etc/nginx/certs/nginx.key;
  # mTLS - not required
  # ssl_client_certificate /etc/nginx/certs/public-ca.crt;
  # ssl_verify_client on;

  # Internal certification
  proxy_ssl_verify on;
  proxy_ssl_verify_depth 2;
  proxy_ssl_certificate /etc/nginx/certs/nginx-client.crt;
  proxy_ssl_certificate_key /etc/nginx/certs/nginx-client.key;
  proxy_ssl_trusted_certificate /etc/nginx/certs/nginx-ca.crt;

  location / {
    proxy_pass https://react-app-prod;
    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $server_name;
  }

  location /sockjs-node {
    proxy_pass https://react-app-prod;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
  }

  location /api/ {
    proxy_pass https://node-api-prod/api/;
  }

  location /graphql/ {
    proxy_pass https://node-api-prod/graphql/;

  }
}
