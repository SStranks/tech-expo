---
services:
  nginx:
    # NGINX Reverse Proxy
    container_name: ${NGINX_PROXY_0_CONTAINER:?error}
    image: nginx:1.29-alpine
    restart: unless-stopped
    depends_on:
      node-api:
        condition: 'service_healthy'
      react-app:
        condition: 'service_healthy'
    environment:
      - NGINX_PROXY_0_DOCKER_PORT_HTTP: ${NGINX_PROXY_0_DOCKER_PORT_HTTP:?error}
      - NGINX_PROXY_0_DOCKER_PORT_TLS: ${NGINX_PROXY_0_DOCKER_PORT_TLS:?error}
      - REACT_CONTAINER: ${REACT_CONTAINER:?error}
      - REACT_DOCKER_PORT: ${REACT_DOCKER_PORT:?error}
      - EXPRESS_CONTAINER: ${EXPRESS_CONTAINER:?error}
      - EXPRESS_DOCKER_PORT: ${EXPRESS_DOCKER_PORT:?error}
    ports:
      - 127.0.0.1:${NGINX_PROXY_0_LOCAL_PORT_HTTP}:${NGINX_PROXY_0_DOCKER_PORT_HTTP}
      - 127.0.0.1:${NGINX_PROXY_0_LOCAL_PORT_TLS}:${NGINX_PROXY_0_DOCKER_PORT_TLS}
    volumes:
      - tmpfs-certs:/etc/nginx/certs:ro
      - ./nginx/templates:/etc/nginx/templates:ro
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro
    networks:
      - techexpo-crm-backend
    security_opt:
      - no-new-privileges
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider -q http://127.0.0.1:$NGINX_PROXY_0_DOCKER_PORT_HTTP/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
      start_interval: 2s

  express-api:
    build:
      context: .
      dockerfile: apps/crm/docker/nodejs/Dockerfile
      args:
        EXPRESS_EXPOSE_PORT: ${EXPRESS_EXPOSE_PORT:?error}
        NODE_VERSION: ${NODE_VERSION:?error}
        IMAGE_VERSION: ${NODE_CUSTOM_IMAGE_VERSION:?error}
        IMAGE_AUTHOR: ${IMAGE_AUTHOR:?error}
    image: techexpo-crm/express-api:latest
    restart: unless-stopped
    env_file:
      - ../server/.env.prod.server
      - ./.env.prod
    volumes:
      - tmpfs-certs:/etc/expressjs/certs:ro
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--ca-certificate=/certs/expressjs-ca.crt',
          '--certificate=/certs/expressjs-healthcheck.crt',
          '--private-key=/certs/expressjs-healthcheck.key',
          '--spider',
          '-q',
          'https://localhost:${EXPRESS_EXPOSE_PORT}/health',
        ]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 5s

  react-app:
    build:
      context: .
      dockerfile: ../client/nginx/Dockerfile
      args:
        REACT_VERSION: ${REACT_VERSION:?error}
        IMAGE_VERSION: ${REACT_CUSTOM_IMAGE_VERSION:?error}
        IMAGE_AUTHOR: ${IMAGE_AUTHOR:?error}
    image: techexpo-crm/nginx-react:latest
    restart: unless-stopped
    env_file:
      - ../client/.env.prod.client
    expose:
      - '443'
    volumes:
      - tmpfs-certs:/etc/nginx-react/certs:ro
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--ca-certificate=/certs/nginxreact-ca.crt',
          '--certificate=/certs/nginxreact-healthcheck.crt',
          '--private-key=/certs/nginxreact-healthcheck.key',
          '--spider',
          '-q',
          'https://localhost:${REACT_EXPOSE_PORT}/health',
        ]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
      start_interval: 5s

  mongo:
    image: mongo:8.0.10
    command: ['mongod', '--auth', '--quiet', '--config', '/etc/mongod.conf']
    restart: unless-stopped
    ports: []
    volumes:
      - tmpfs-certs:/etc/mongo/certs:ro
      - volume-mongo:/data/db
      - ./mongo/mongod.conf:/etc/mongod.conf:ro
      - ./mongo/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
      - ./mongo/mongo-healthcheck.sh:/usr/local/bin/mongo-healthcheck.sh:ro
    depends_on:
      certs:
        condition: 'service_healthy'
    healthcheck:
      test: ['CMD', '/bin/bash', '/usr/local/bin/mongo-healthcheck.sh']
      interval: 30s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s

  postgres:
    image: postgres:17.5
    restart: unless-stopped
    shm_size: 128mb
    ports: []
    volumes:
      - tmpfs-certs:/etc/postgres/certs:ro
      - volume-postgres:/var/lib/postgresql/data
      - ./postgres/initdb:/docker-entrypoint-initdb.d:ro
      - ./postgres/scripts:/usr/local/bin/scripts:ro
    depends_on:
      certs:
        condition: 'service_healthy'
    healthcheck:
      test: ['CMD', '/bin/bash', '/usr/local/bin/scripts/postgres-healthcheck.sh']
      interval: 30s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s
    user: 'postgres'
    secrets:
      - postgres_pg_hba

  redis:
    image: redis:8.0-alpine
    restart: unless-stopped
    ports: []
    volumes:
      - tmpfs-certs:/etc/redis/certs:ro
      - volume-redis:/data
      - ./redis/redis-healthcheck.sh:/usr/local/bin/redis-healthcheck.sh:ro
      - ./redis/redis-init.sh:/usr/local/bin/redis-init.sh:ro
    depends_on:
      certs:
        condition: 'service_healthy'
    healthcheck:
      test: ['CMD', '/bin/sh', '/usr/local/bin/redis-healthcheck.sh']
      interval: 30s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 15s
    entrypoint: ['/usr/local/bin/redis-init.sh']

  grafana:
    image: grafana/grafana:12.0.2
    restart: unless-stopped
    environment:
      GF_LOG_LEVEL: error
    ports:
      - '127.0.0.1:${GRAFANA_LOCAL_PORT:?error}:${GRAFANA_DOCKER_PORT:?error}'
    volumes:
      - tmpfs-certs:/etc/grafana/certs:ro
      - volume-grafana:/var/lib/grafana
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider -q http://127.0.0.1:$NGINX_PROXY_1_DOCKER_PORT_HTTP/grafana/healthcheck']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
      start_interval: 2s

  prometheus:
    image: prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.config.file=/etc/prometheus/auth.yml'
      - '--log.level=error'
    restart: unless-stopped
    ports:
      - '127.0.0.1:${PROMETHEUS_LOCAL_PORT:?error}:${PROMETHEUS_DOCKER_PORT:?error}'
    volumes:
      - tmpfs-certs:/etc/prometheus/certs:ro
      - volume-prometheus:/prometheus
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider -q http://127.0.0.1:$NGINX_PROXY_1_DOCKER_PORT_HTTP/prometheus/healthcheck']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
      start_interval: 2s

  certs:
    container_name: ${CERTS_CONTAINER:?error}
    image: node:22-alpine3.22
    restart: no
    volumes:
      - tmpfs-certs:/certs:rw
      - ./certs/dev:/src:ro
      - ./certs/certs-init.sh:/usr/local/bin/certs-init.sh:ro
    entrypoint: ['/usr/local/bin/certs-init.sh']
    healthcheck:
      test: ['CMD', 'test', '-f', '/certs/.ready']
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 10s
      start_interval: 2s

volumes:
  tmpfs-certs:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: 'uid=1001,gid=1001,mode=705'
  volume-mongo:
    name: techexpo-mongo-prod
    external: true
  volume-postgres:
    name: techexpo-postgres-prod
    external: true
  volume-redis:
    name: techexpo-redis-prod
    external: true
  volume-grafana:
    name: techexpo-grafana-prod
    external: true
  volume-prometheus:
    name: techexpo-prometheus-prod
    external: true

secrets:
  postgres_pg_hba:
    file: ./postgres/conf/.secret.pg_hba.conf
