upstream prometheus {
  server ${PROMETHEUS_CONTAINER}:${PROMETHEUS_DOCKER_PORT};
}
upstream grafana {
  server ${GRAFANA_CONTAINER}:${GRAFANA_DOCKER_PORT};
}

server {
  listen ${NGINX_METRICS_DOCKER_PORT_HTTP};

  location = /health {
    default_type application/json;
    return 200 '{"status":"ok"}';
  }

  location = /prometheus/healthcheck {
    proxy_pass https://prometheus/-/healthy;
    proxy_set_header Host $host;
    proxy_set_header Authorization $http_authorization;
    proxy_ssl_verify on;
    proxy_ssl_verify_depth 2;
    proxy_ssl_name techexpo-prometheus;
    proxy_ssl_server_name on;
    proxy_ssl_certificate /etc/nginx/certs/nginxmetrics-client.crt;
    proxy_ssl_certificate_key /etc/nginx/certs/nginxmetrics-client.key;
    proxy_ssl_trusted_certificate /etc/nginx/certs/nginxmetrics-ca.crt;
  }

  location = /grafana/healthcheck {
    proxy_pass https://grafana/api/health;
    proxy_set_header Host $host;
    proxy_set_header Authorization $http_authorization;
    proxy_ssl_verify on;
    proxy_ssl_verify_depth 2;
    proxy_ssl_name techexpo-grafana;
    proxy_ssl_server_name on;
    proxy_ssl_certificate /etc/nginx/certs/nginxmetrics-client.crt;
    proxy_ssl_certificate_key /etc/nginx/certs/nginxmetrics-client.key;
    proxy_ssl_trusted_certificate /etc/nginx/certs/nginxmetrics-ca.crt;
  }
}

server {
  listen ${NGINX_METRICS_DOCKER_PORT_TLS} ssl;

  ssl_certificate /etc/nginx/certs/nginxmetrics.crt;
  ssl_certificate_key /etc/nginx/certs/nginxmetrics.key;
  ssl_client_certificate /etc/nginx/certs/nginxmetrics-ca.crt;
  # TODO:
  # ssl_verify_client on;
  # ssl_verify_depth 2;

  proxy_ssl_certificate /etc/nginx/certs/nginxmetrics-client.crt;
  proxy_ssl_certificate_key /etc/nginx/certs/nginxmetrics-client.key;
  proxy_ssl_trusted_certificate /etc/nginx/certs/nginxmetrics-ca.crt;
  proxy_ssl_verify on;
  proxy_ssl_verify_depth 2;
  proxy_ssl_server_name on;

  location = /prometheus {
    return 301 /prometheus/;
  }

  location / {
    proxy_pass https://prometheus/;
    proxy_ssl_name techexpo-prometheus;
    proxy_set_header Host $host;
    proxy_set_header Authorization $http_authorization;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_pass_header WWW-Authenticate;
  }

  location = /grafana {
    return 301 /grafana/;
  }

  location /grafana/ {
    proxy_pass https://grafana;
    proxy_ssl_name techexpo-grafana;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}
