---
services:
  express-api:
    image: node:22-alpine3.22
    profiles: ['dev', 'express-api']
    restart: on-failure:3
    depends_on:
      certs:
        condition: 'service_healthy'
      mongo:
        condition: 'service_healthy'
      postgres:
        condition: 'service_healthy'
      redis:
        condition: 'service_healthy'
    env_file:
      - ../server/.env.dev.server
      - ./.env.dev
    ports:
      - 127.0.0.1:${EXPRESS_LOCAL_PORT:?error}:${EXPRESS_DOCKER_PORT:?error}
      - 127.0.0.1:9229:9229
      - 127.0.0.1:9230:9230
    volumes:
      - tmpfs-certs:/etc/expressjs/certs:ro
      - ../shared:/app/shared:ro
      - ../server:/app/server:ro
      - ../../../node_modules:/node_modules:ro
      - ../server/src/temp:/app/server/src/temp
      - ./nodejs/node-express-init.sh:/usr/local/bin/node-express-init.sh:ro
      - ./nodejs/node-express-healthcheck.sh:/usr/local/bin/node-express-healthcheck.sh:ro
    entrypoint: ['/usr/local/bin/node-express-init.sh']
    healthcheck:
      test: ['CMD', '/bin/sh', '/usr/local/bin/node-express-healthcheck.sh']
      interval: 30s
      timeout: 5s
      retries: 3
      start_interval: 3s
      start_period: 30s
    user: 'node'

  mongo:
    image: mongo:8.0.10
    command: ['mongod', '--auth', '--quiet', '--config', '/etc/mongod.conf']
    profiles: ['dev', 'mongo']
    restart: on-failure:3
    volumes:
      - tmpfs-certs:/etc/mongo/certs:ro
      - volume-mongo:/data/db
      - ./mongo/mongod.conf:/etc/mongod.conf:ro
      - ./mongo/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
      - ./mongo/mongo-healthcheck.sh:/usr/local/bin/mongo-healthcheck.sh:ro
    depends_on:
      certs:
        condition: 'service_healthy'
    healthcheck:
      test: ['CMD', '/bin/bash', '/usr/local/bin/mongo-healthcheck.sh']
      interval: 60s
      timeout: 5s
      retries: 5
      start_interval: 3s
      start_period: 15s

  mongo-express:
    container_name: ${MONGOEXPRESS_CONTAINER:?error}
    image: mongo-express:1.1.0-rc-3 # Built from source
    profiles: ['dev', 'mongo']
    restart: on-failure:3
    environment:
      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
      ME_CONFIG_BASICAUTH: true
      ME_CONFIG_BASICAUTH_USERNAME_FILE: /run/secrets/mongoexpress_user
      ME_CONFIG_BASICAUTH_PASSWORD_FILE: /run/secrets/mongoexpress_password
      ME_CONFIG_SITE_SESSIONSECRET: /run/secrets/mongoexpress_sessionsecret
      ME_CONFIG_SITE_COOKIESECRET: /run/secrets/mongoexpress_cookiesecret
      ME_CONFIG_MONGODB_URL_FILE: /run/secrets/mongoexpress_url
      ME_CONFIG_MONGODB_TLS: true
      ME_CONFIG_MONGODB_TLS_ALLOW_CERTS: true
      ME_CONFIG_MONGODB_TLS_CA_FILE: /etc/mongoexpress/certs/mongoexpress-ca.pem
      ME_CONFIG_MONGODB_TLS_CERT_KEY_FILE: /etc/mongoexpress/certs/mongoexpress.pem
      MONGOEXPRESS_CONTAINER: ${MONGOEXPRESS_CONTAINER:?error}
      MONGOEXPRESS_DOCKER_PORT: ${MONGOEXPRESS_DOCKER_PORT:?error}
      MONGO_CONTAINER: ${MONGO_CONTAINER:?error}
      MONGO_PROTOCOL: ${MONGO_PROTOCOL:?error}
      MONGO_PORT: ${MONGO_PORT:?error}
      MONGO_ARGS: ${ME_MONGO_ARGS:?error}
    ports:
      - 127.0.0.1:${MONGOEXPRESS_LOCAL_PORT:?error}:${MONGOEXPRESS_DOCKER_PORT:?error}
    volumes:
      - tmpfs-certs:/etc/mongoexpress/certs:ro
      - ./mongoexpress/mongo-express-healthcheck.sh:/usr/local/bin/mongo-express-healthcheck.sh:ro
      - ./mongoexpress/mongo-express-init.sh:/usr/local/bin/mongo-express-init.sh:ro
    networks:
      - techexpo-crm-backend
    security_opt:
      - no-new-privileges
    depends_on:
      mongo:
        condition: 'service_healthy'
      certs:
        condition: 'service_healthy'
    healthcheck:
      test: ['CMD', '/bin/bash', '/usr/local/bin/mongo-express-healthcheck.sh']
      interval: 2m
      timeout: 5s
      retries: 5
      start_interval: 3s
      start_period: 15s
    secrets:
      - mongoexpress_user
      - mongoexpress_password
      - mongoexpress_url
      - mongoexpress_cookiesecret
      - mongoexpress_sessionsecret

  postgres:
    image: postgres:17.5
    profiles: ['dev', 'postgres', 'postgres-seeder']
    shm_size: 128mb
    restart: on-failure:3
    ports:
      - 127.0.0.1:${POSTGRES_LOCAL_PORT:?error}:${POSTGRES_DOCKER_PORT:?error}
    volumes:
      - tmpfs-certs:/etc/postgres/certs:ro
      - volume-postgres:/var/lib/postgresql/data
      - ./postgres/initdb:/docker-entrypoint-initdb.d:ro
      - ./postgres/scripts:/usr/local/bin/scripts:ro
    depends_on:
      certs:
        condition: 'service_healthy'
    healthcheck:
      test: ['CMD', '/bin/bash', '/usr/local/bin/scripts/postgres-healthcheck.sh']
      interval: 60s
      timeout: 5s
      retries: 5
      start_interval: 3s
      start_period: 15s
    user: 'postgres'
    secrets:
      - postgres_pg_hba

  postgres-seeder:
    container_name: ${POSTGRES_SEEDER_CONTAINER:?error}
    image: node:22-alpine3.22
    profiles: ['postgres-seeder']
    working_dir: /app/server
    depends_on:
      postgres:
        condition: 'service_healthy'
    environment:
      POSTGRES_HOST: ${POSTGRES_CONTAINER:?error}
    env_file:
      - ../server/.env.dev.server
      - ./.env.dev
    ports:
      - 127.0.0.1:9230:9230
    volumes:
      - tmpfs-certs:/certs:ro
      - ../server:/app/server:ro
      - ../../../node_modules:/node_modules:ro
      - ./postgres/postgres-seeder-init.sh:/usr/local/bin/postgres-seeder-init.sh:ro
    networks:
      - techexpo-crm-backend
    security_opt:
      - no-new-privileges
    stdin_open: true
    tty: true
    entrypoint: ['/usr/local/bin/postgres-seeder-init.sh']
    secrets:
      - postgres_user_migrator
      - postgres_password_migrator
      - postgres_database
      - postgres_pepper
      - demo_acc_generic_non_user_password

  redis:
    image: redis:8.0-alpine
    profiles: ['dev', 'redis']
    restart: on-failure:3
    volumes:
      - tmpfs-certs:/etc/redis/certs:ro
      - volume-redis:/data
      - ./redis/redis-healthcheck.sh:/usr/local/bin/redis-healthcheck.sh:ro
      - ./redis/redis-init.sh:/usr/local/bin/redis-init.sh:ro
    depends_on:
      certs:
        condition: 'service_healthy'
    healthcheck:
      test: ['CMD', '/bin/sh', '/usr/local/bin/redis-healthcheck.sh']
      interval: 60s
      timeout: 5s
      retries: 5
      start_interval: 3s
      start_period: 15s
    entrypoint: ['/usr/local/bin/redis-init.sh']

  redisinsight:
    container_name: ${REDISINSIGHT_CONTAINER:?error}
    image: redis/redisinsight:2.70
    profiles: ['dev', 'redis']
    restart: on-failure:3
    environment:
      - REDIS_CONTAINER=${REDIS_CONTAINER:?error}
      - REDIS_DOCKER_PORT=${REDIS_DOCKER_PORT:?error}
      - REDISINSIGHT_CONTAINER=${REDISINSIGHT_CONTAINER:?error}
      - REDISINSIGHT_DOCKER_PORT=${REDISINSIGHT_DOCKER_PORT:?error}
    ports:
      - 127.0.0.1:${REDISINSIGHT_LOCAL_PORT:?error}:${REDISINSIGHT_DOCKER_PORT:?error}
    volumes:
      - tmpfs-certs:/etc/redisinsight/certs:ro
      - ./redisinsight/redisinsight-init.sh:/usr/local/bin/redisinsight-init.sh:ro
      - ./redisinsight/redisinsight-healthcheck.sh:/usr/local/bin/redisinsight-healthcheck.sh:ro
    networks:
      - techexpo-crm-backend
      - techexpo-crm-redisinsight
    depends_on:
      certs:
        condition: 'service_healthy'
      redis:
        condition: 'service_healthy'
    entrypoint: ['/usr/local/bin/redisinsight-init.sh']
    healthcheck:
      test: ['CMD', '/bin/sh', '/usr/local/bin/redisinsight-healthcheck.sh']
      interval: 2m
      timeout: 30s
      retries: 5
      start_interval: 3s
      start_period: 15s
    secrets:
      - redis_password

  mailpit:
    container_name: ${MAILPIT_CONTAINER:?error}
    image: axllent/mailpit:v1.27
    profiles: [dev]
    restart: on-failure:3
    depends_on:
      certs:
        condition: 'service_healthy'
    environment:
      MP_MAX_MESSAGES: 5000
      MP_DATABASE: /data/mailpit.db
      MP_ENABLE_PROMETHEUS: 0.0.0.0:${MAILPIT_PROMETHEUS_PORT:?error}
      MP_UI_AUTH_FILE: /run/secrets/mailpit_ui_auth
      MP_SMTP_AUTH_FILE: /run/secrets/mailpit_smtp_auth
      MP_SMTP_AUTH_ALLOW_INSECURE: true
      MP_SMTP_TLS_CERT: /etc/mailpit/certs/mailpit.crt
      MP_SMTP_TLS_KEY: /etc/mailpit/certs/mailpit.pem
    expose:
      - ${MAILPIT_SMTP_DOCKER_PORT:?error}
    ports:
      - 127.0.0.1:${MAILPIT_WEBUI_LOCAL_PORT:?error}:${MAILPIT_WEBUI_DOCKER_PORT:?error}
    volumes:
      - tmpfs-certs:/etc/mailpit/certs:ro
      - volume-mailpit:/data
    networks:
      - techexpo-crm-backend
      - techexpo-crm-metrics
    secrets:
      - mailpit_ui_auth
      - mailpit_smtp_auth

  certs:
    container_name: ${CERTS_CONTAINER:?error}
    image: node:22-alpine3.22
    restart: no
    volumes:
      - tmpfs-certs:/certs:rw
      - ./certs/dev:/src:ro
      - ./certs/certs-init.sh:/usr/local/bin/certs-init.sh:ro
    entrypoint: ['/usr/local/bin/certs-init.sh']
    healthcheck:
      test: ['CMD', 'test', '-f', '/certs/.ready']
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 10s
      start_interval: 2s

  nginx-react:
    # Use 'npm start' from ./client to init webpack-dev-server
    image: alpine:3.22
    profiles: [unused]

volumes:
  tmpfs-certs:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: 'uid=1001,gid=1001,mode=705'
  volume-mailpit:
    name: techexpo-mailpit
    external: true
  volume-mongo:
    name: techexpo-mongo
    external: true
  volume-postgres:
    name: techexpo-postgres
    external: true
  volume-redis:
    name: techexpo-redis
    external: true

networks:
  techexpo-crm-redisinsight:
    driver: bridge

secrets:
  mailpit_ui_auth:
    file: ${SECRET_PATH}/.secret.mailpit_ui_auth.txt
  mailpit_smtp_auth:
    file: ${SECRET_PATH}/.secret.mailpit_smtp_auth.txt
  mongoexpress_user:
    file: ${SECRET_PATH}/.secret.mongoexpress_user.txt
  mongoexpress_password:
    file: ${SECRET_PATH}/.secret.mongoexpress_password.txt
  mongoexpress_url:
    file: ${SECRET_PATH}/.secret.mongoexpress_url.txt
  mongoexpress_cookiesecret:
    file: ${SECRET_PATH}/.secret.mongoexpress_cookiesecret.txt
  mongoexpress_sessionsecret:
    file: ${SECRET_PATH}/.secret.mongoexpress_sessionsecret.txt
  postgres_pg_hba:
    file: ./postgres/conf/.secret.pg_hba.conf
