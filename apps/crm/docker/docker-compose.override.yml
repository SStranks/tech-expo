---
services:
  # Client: React App
  # Use 'npm start' from ./client to init webpack-dev-server

  # Server: NodeJS Express
  node-api:
    container_name: techexpo-express
    image: node:22-alpine3.22
    working_dir: /app/server
    ports:
      - ${NODE_LOCAL_PORT:?error}:${NODE_DOCKER_PORT:?error}
      - '9229:9229'
      - '9230:9230'
    volumes:
      - ../shared:/app/shared:ro
      - ../server:/app/server:ro
      - ../../../node_modules:/node_modules:ro
      - ../server/src/temp:/app/server/src/temp
      - ./node-express-init.sh:/usr/local/bin/node-express-init.sh:ro
    networks:
      - techexpo-crm-backend
    environment:
      MONGO_HOST: ${MONGO_CONTAINER}
      POSTGRES_HOST: ${POSTGRES_CONTAINER}
      REDIS_HOST: ${REDIS_CONTAINER}
    env_file:
      - ../server/.env.dev
      - ./.env.dev
    depends_on:
      mongo:
        condition: 'service_healthy'
      postgres:
        condition: 'service_healthy'
    security_opt:
      - no-new-privileges
    secrets:
      - demo_acc_generic_non_user_password
      - graphql_introspect_auth
      - jwt_auth_secret
      - jwt_refresh_secret
      - mongo_user_service
      - mongo_password_service
      - mongo_database
      - nodemailer_username
      - nodemailer_password
      - nodemailer_dev_email
      - postgres_user_service
      - postgres_password_service
      - postgres_pepper
      - postgres_database
      - redis_password
    user: 'node'
    entrypoint: ['/usr/local/bin/node-express-init.sh']
    profiles: ['dev', 'node-api']

  # DB: Mongo
  mongo:
    container_name: ${MONGO_CONTAINER}
    image: mongo:8.0.10
    restart: on-failure
    healthcheck:
      test: ['CMD', '/bin/bash', '/usr/local/bin/mongo-healthcheck.sh']
      interval: 60s
      timeout: 5s
      retries: 5
      start_interval: 3s
      start_period: 15s
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/mongo_user_root
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongo_password_root
    ports:
      - ${MONGO_LOCAL_PORT:?error}:${MONGO_DOCKER_PORT:?error}
    volumes:
      - volume-mongo:/data/db
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
      - ./mongo-healthcheck.sh:/usr/local/bin/mongo-healthcheck.sh:ro
    networks:
      - techexpo-crm-backend
    security_opt:
      - no-new-privileges
    secrets:
      - mongo_database
      - mongo_user_root
      - mongo_user_service
      - mongo_password_root
      - mongo_password_service
    entrypoint: ['/usr/local/bin/docker-entrypoint.sh']
    command: ['mongod', '--auth', '--quiet']
    profiles: ['dev', 'mongo']

  # DB: Mongo Express
  mongo-express:
    container_name: ${MONGO_EXPRESS_CONTAINER}
    image: mongo-express:1.0.2
    restart: on-failure
    healthcheck:
      test: ['CMD', '/bin/bash', '/usr/local/bin/mongo-express-healthcheck.sh']
      interval: 2m
      timeout: 30s
      retries: 5
      start_interval: 3s
      start_period: 15s
    depends_on:
      - mongo
    ports:
      - ${MONGOEXPRESS_LOCAL_PORT:?error}:${MONGOEXPRESS_DOCKER_PORT:?error}
    environment:
      # // NOTE:  v1.0.3 will allow ME_CONFIG_MONGODB_URL_FILE.
      ME_CONFIG_MONGODB_ENABLE_ADMIN: ${ME_CONFIG_MONGODB_ENABLE_ADMIN}
      ME_CONFIG_MONGODB_AUTH_USERNAME_FILE: /run/secrets/mongo_user_root
      ME_CONFIG_MONGODB_AUTH_PASSWORD_FILE: /run/secrets/mongo_password_root
      ME_CONFIG_BASICAUTH_USERNAME_FILE: /run/secrets/mongoexpress_user
      ME_CONFIG_BASICAUTH_PASSWORD_FILE: /run/secrets/mongoexpress_password
      MONGO_CONTAINER: ${MONGO_CONTAINER}
      MONGO_PROTOCOL: ${MONGO_PROTOCOL}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_ARGS: ${MONGO_ARGS}
    volumes:
      - ./mongo-express-healthcheck.sh:/usr/local/bin/mongo-express-healthcheck.sh:ro
      - ./mongo-express-init.sh:/usr/local/bin/mongo-express-init.sh:ro
    networks:
      - techexpo-crm-backend
    security_opt:
      - no-new-privileges
    secrets:
      - mongoexpress_user
      - mongoexpress_password
      - mongo_user_root
      - mongo_password_root
      - mongo_database
    entrypoint: ['/usr/local/bin/mongo-express-init.sh']
    profiles: ['dev', 'mongo']

  # DB: Postgres
  postgres:
    container_name: ${POSTGRES_CONTAINER}
    image: postgres:17.5
    restart: on-failure
    healthcheck:
      test: ['CMD', '/bin/bash', '/usr/local/bin/postgres-healthcheck.sh']
      interval: 60s
      timeout: 5s
      retries: 5
      start_interval: 3s
      start_period: 15s
    ports:
      - ${POSTGRES_LOCAL_PORT:?error}:${POSTGRES_DOCKER_PORT:?error}
    shm_size: 128mb
    volumes:
      - volume-postgres:/var/lib/postgresql/data
      - ./postgres-init.sh:/docker-entrypoint-initdb.d/postgres-init.sh:ro
      - ./postgres-healthcheck.sh:/usr/local/bin/postgres-healthcheck.sh
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_user_super
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password_super
      POSTGRES_DB_FILE: /run/secrets/postgres_database
    networks:
      - techexpo-crm-backend
    secrets:
      - postgres_user_super
      - postgres_user_migrator
      - postgres_user_service
      - postgres_password_super
      - postgres_password_migrator
      - postgres_password_service
      - postgres_database
    profiles: ['dev', 'postgres', 'postgres-seeder']
    user: 'postgres'

  postgres-seeder:
    container_name: ${POSTGRES_SEEDER_CONTAINER}
    image: node:22-alpine3.22
    working_dir: /app/server
    ports:
      - ${NODE_LOCAL_PORT:?error}:${NODE_DOCKER_PORT:?error}
      - '9230:9230'
    volumes:
      - ../server:/app/server:ro
      - ../../../node_modules:/node_modules:ro
      - ./postgres-seeder-init.sh:/usr/local/bin/postgres-seeder-init.sh:ro
    networks:
      - techexpo-crm-backend
    environment:
      POSTGRES_HOST: ${POSTGRES_CONTAINER}
    env_file:
      - ../server/.env.dev
      - ./.env.dev
    depends_on:
      postgres:
        condition: 'service_healthy'
    security_opt:
      - no-new-privileges
    secrets:
      - postgres_user_migrator
      - postgres_password_migrator
      - postgres_database
      - postgres_pepper
      - demo_acc_generic_non_user_password
    stdin_open: true
    tty: true
    entrypoint: ['/usr/local/bin/postgres-seeder-init.sh']
    profiles: ['postgres-seeder']

  redis:
    container_name: ${REDIS_CONTAINER}
    image: redis:8.0-alpine
    restart: on-failure
    healthcheck:
      test: ['CMD', '/bin/sh', '/usr/local/bin/redis-healthcheck.sh']
      interval: 60s
      timeout: 5s
      retries: 5
      start_interval: 3s
      start_period: 15s
    ports:
      - ${REDIS_LOCAL_PORT:?error}:${REDIS_DOCKER_PORT:?error}
    volumes:
      - volume-redis:/data
      - ./redis-healthcheck.sh:/usr/local/bin/redis-healthcheck.sh:ro
      - ./redis-init.sh:/usr/local/bin/redis-init.sh:ro
    networks:
      - techexpo-crm-backend
    secrets:
      - redis_password
    entrypoint: ['/usr/local/bin/redis-init.sh']
    profiles: ['dev', 'redis']

  redisinsight:
    container_name: ${REDISINSIGHT_CONTAINER}
    image: redis/redisinsight:2.70
    restart: on-failure
    healthcheck:
      test: ['CMD', '/bin/sh', '/usr/local/bin/redisinsight-healthcheck.sh']
      interval: 2m
      timeout: 30s
      retries: 5
      start_interval: 3s
      start_period: 15s
    ports:
      - ${REDISINSIGHT_LOCAL_PORT:?error}:${REDISINSIGHT_DOCKER_PORT:?error}
    volumes:
      - ./redisinsight-healthcheck.sh:/usr/local/bin/redisinsight-healthcheck.sh:ro
    networks:
      - techexpo-crm-backend
    profiles: ['dev', 'redis']

volumes:
  volume-mongo:
    name: techexpo-mongo
    external: true
  volume-postgres:
    name: techexpo-postgres
    external: true
  volume-redis:
    name: techexpo-redis
    external: true

networks:
  techexpo-crm-backend:
    driver: bridge

secrets:
  mongo_user:
    file: ${SECRET_PATH}/.secret.mongo_user.txt
  mongo_password:
    file: ${SECRET_PATH}/.secret.mongo_password.txt
  mongo_user_root:
    file: ${SECRET_PATH}/.secret.mongo_user_root.txt
  mongo_user_service:
    file: ${SECRET_PATH}/.secret.mongo_user_service.txt
  mongo_password_root:
    file: ${SECRET_PATH}/.secret.mongo_password_root.txt
  mongo_password_service:
    file: ${SECRET_PATH}/.secret.mongo_password_service.txt
  mongo_database:
    file: ${SECRET_PATH}/.secret.mongo_database.txt
  mongoexpress_user:
    file: ${SECRET_PATH}/.secret.mongoexpress_user.txt
  mongoexpress_password:
    file: ${SECRET_PATH}/.secret.mongoexpress_password.txt
  postgres_user_super:
    file: ${SECRET_PATH}/.secret.postgres_user_super.txt
  postgres_user_migrator:
    file: ${SECRET_PATH}/.secret.postgres_user_migrator.txt
  postgres_user_service:
    file: ${SECRET_PATH}/.secret.postgres_user_service.txt
  postgres_password_super:
    file: ${SECRET_PATH}/.secret.postgres_password_super.txt
  postgres_password_migrator:
    file: ${SECRET_PATH}/.secret.postgres_password_migrator.txt
  postgres_password_service:
    file: ${SECRET_PATH}/.secret.postgres_password_service.txt
  postgres_database:
    file: ${SECRET_PATH}/.secret.postgres_database.txt
  postgres_pepper:
    file: ${SECRET_PATH}/.secret.postgres_pepper.txt
  redis_password:
    file: ${SECRET_PATH}/.secret.redis_password.txt
  nodemailer_username:
    file: ${SECRET_PATH}/.secret.nodemailer_username.txt
  nodemailer_password:
    file: ${SECRET_PATH}/.secret.nodemailer_password.txt
  nodemailer_dev_email:
    file: ${SECRET_PATH}/.secret.nodemailer_dev_email.txt
  jwt_auth_secret:
    file: ${SECRET_PATH}/.secret.jwt_auth_secret.txt
  jwt_refresh_secret:
    file: ${SECRET_PATH}/.secret.jwt_refresh_secret.txt
  graphql_introspect_auth:
    file: ${SECRET_PATH}/.secret.graphql_introspect_auth.txt
  demo_acc_generic_non_user_password:
    file: ${SECRET_PATH}/.secret.demo_acc_generic_non_user_password.txt
